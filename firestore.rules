rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // === FUNCIONES HELPER ===
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwnerId(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isServiceOwner(serviceId) {
      return isSignedIn()
        && exists(/databases/$(database)/documents/services/$(serviceId))
        && request.auth.uid == get(/databases/$(database)/documents/services/$(serviceId)).data.providerId;
    }
    function validStorageUrl(url) {
      return url == null || url == '' || url.matches('https://(firebasestorage|storage)\\.googleapis\\.com/.*|https://.*\\.(jpeg|jpg|png|webp)$');
    }
    
    // Helper para validar lista de imágenes (hasta 6) sea lista de strings o vacía
    function listAllStringsMax6(l) {
      return l == null || l is list && l.size() <= 6;
    }
    

    // Helper para validar timestamps cercanos al momento actual (más permisivo)
    function nearNow(ts) {
      return ts is timestamp
             && (request.time - ts <= duration.value(30, 'minutes'))
             && (ts - request.time <= duration.value(10, 'minutes'));
    }
    
    // === USUARIOS ===
    match /users/{userId} {
      allow read: if isOwnerId(userId);

      // Crear/actualizar usuario (compatible con código actual)
      allow create, update: if isOwnerId(userId)
        && request.resource.id == request.auth.uid
        && (!request.resource.data.keys().hasAny(['photoUrl']) || request.resource.data.photoUrl == null
            || request.resource.data.photoUrl.matches('https://(firebasestorage|storage)\\.googleapis\\.com/.*|https://(lh3|lh4|lh5|lh6)\\.googleusercontent\\.com/.*|https://yt3\\.ggpht\\.com/.*'));

      allow delete: if isOwnerId(userId);
    }

    // === SERVICIOS ===
    match /services/{serviceId} {
      allow read: if true;

      // Crear servicio con validaciones básicas más permisivas
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.providerId
        && request.resource.data.keys().hasAll(['title','description','category','price','providerId'])
        && request.resource.data.title is string && request.resource.data.title.size() > 2 && request.resource.data.title.size() <= 200
        && request.resource.data.description is string && request.resource.data.description.size() > 5 && request.resource.data.description.size() <= 10000
        && request.resource.data.category is string && request.resource.data.category.size() > 0
        && request.resource.data.price is number && request.resource.data.price >= 0
        && (!request.resource.data.keys().hasAny(['mainImage']) || request.resource.data.mainImage == null || validStorageUrl(request.resource.data.mainImage))
        && (!request.resource.data.keys().hasAny(['images']) || request.resource.data.images == null || listAllStringsMax6(request.resource.data.images));

      // Actualizar servicio con validaciones básicas más permisivas
      allow update: if isSignedIn()
        && request.auth.uid == resource.data.providerId
        && request.resource.data.providerId == resource.data.providerId
        && (!request.resource.data.keys().hasAny(['mainImage']) || request.resource.data.mainImage == null || validStorageUrl(request.resource.data.mainImage))
        && (!request.resource.data.keys().hasAny(['price']) || (request.resource.data.price is number && request.resource.data.price >= 0))
        && (!request.resource.data.keys().hasAny(['images']) || request.resource.data.images == null || listAllStringsMax6(request.resource.data.images))
        && (!request.resource.data.keys().hasAny(['title']) || (request.resource.data.title is string && request.resource.data.title.size() > 2 && request.resource.data.title.size() <= 200))
        && (!request.resource.data.keys().hasAny(['description']) || (request.resource.data.description is string && request.resource.data.description.size() > 5 && request.resource.data.description.size() <= 10000))
        && (!request.resource.data.keys().hasAny(['category']) || (request.resource.data.category is string && request.resource.data.category.size() > 0));

      allow delete: if isSignedIn() && request.auth.uid == resource.data.providerId;

      // === RESEÑAS ===
      match /reviews/{reviewId} {
        allow read: if true;

        // Fuerza un solo review por usuario: id del doc == uid
        allow create: if isSignedIn()
          && request.auth.uid == request.resource.data.userId
          && request.resource.id == request.auth.uid
          && request.resource.data.keys().hasAll(['serviceId','userId','rating'])
          && request.resource.data.serviceId == serviceId
          && (request.resource.data.rating is number)
          && request.resource.data.rating >= 1 && request.resource.data.rating <= 5
          && (!request.resource.data.keys().hasAny(['comment']) || (request.resource.data.comment is string && request.resource.data.comment.size() <= 5000))
          && (!request.resource.data.keys().hasAny(['userName']) || (request.resource.data.userName is string && request.resource.data.userName.size() <= 100))
          && (!request.resource.data.keys().hasAny(['userPhotoUrl']) || (request.resource.data.userPhotoUrl is string && request.resource.data.userPhotoUrl.size() <= 500))
          && (!request.resource.data.keys().hasAny(['createdAt']) || nearNow(request.resource.data.createdAt))
          && (!request.resource.data.keys().hasAny(['updatedAt']) || nearNow(request.resource.data.updatedAt));

        // Actualizar reseña con whitelisting y re-validación + inmutables
        allow update: if isSignedIn()
          && request.auth.uid == resource.data.userId
          && request.resource.data.serviceId == resource.data.serviceId
          && request.resource.data.userId == resource.data.userId
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rating','comment','updatedAt','userName','userPhotoUrl'])
          && (request.resource.data.rating is number)
          && request.resource.data.rating >= 1 && request.resource.data.rating <= 5
          && (!request.resource.data.keys().hasAny(['comment']) || (request.resource.data.comment is string && request.resource.data.comment.size() <= 5000))
          && (!request.resource.data.keys().hasAny(['updatedAt']) || (
               request.resource.data.updatedAt is timestamp
               && request.resource.data.updatedAt >= resource.data.updatedAt
               && nearNow(request.resource.data.updatedAt)
             ));

        // Permitir borrado de reseñas propias O anonimización (para borrado de cuenta)
        allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      }

      // Metadatos de imágenes de servicios
      match /images/{imageId} {
        allow read: if true;
        allow write: if isServiceOwner(serviceId);
      }
    }

    // === RESEÑAS GLOBALES (colección top-level) ===
    match /reviews/{reviewId} {
      allow read: if true;
      
      // Crear reseña global
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.userId
        && request.resource.data.keys().hasAll(['serviceId','userId','rating'])
        && (request.resource.data.rating is number)
        && request.resource.data.rating >= 1 && request.resource.data.rating <= 5
        && (!request.resource.data.keys().hasAny(['comment']) || (request.resource.data.comment is string && request.resource.data.comment.size() <= 5000))
        && (!request.resource.data.keys().hasAny(['userName']) || (request.resource.data.userName is string && request.resource.data.userName.size() <= 100))
        && (!request.resource.data.keys().hasAny(['userPhotoUrl']) || (request.resource.data.userPhotoUrl is string && request.resource.data.userPhotoUrl.size() <= 500))
        && (!request.resource.data.keys().hasAny(['createdAt']) || nearNow(request.resource.data.createdAt))
        && (!request.resource.data.keys().hasAny(['updatedAt']) || nearNow(request.resource.data.updatedAt));

      // Actualizar reseña global (incluyendo anonimización para borrado de cuenta)
      allow update: if (
        // Usuario autenticado puede actualizar su propia reseña
        (isSignedIn() && request.auth.uid == resource.data.userId
         && request.resource.data.serviceId == resource.data.serviceId
         && request.resource.data.userId == resource.data.userId
         && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rating','comment','updatedAt','userName','userPhotoUrl'])
         && (request.resource.data.rating is number)
         && request.resource.data.rating >= 1 && request.resource.data.rating <= 5
         && (!request.resource.data.keys().hasAny(['comment']) || (request.resource.data.comment is string && request.resource.data.comment.size() <= 5000))
         && (!request.resource.data.keys().hasAny(['updatedAt']) || nearNow(request.resource.data.updatedAt)))
        // O anonimización del sistema para borrado de cuenta (permitir sin autenticación)
        || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['userName','userPhotoUrl','updatedAt'])
            && request.resource.data.userName == 'Usuario eliminado'
            && request.resource.data.userPhotoUrl == null)
      );

      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // === FAVORITOS ===
    // Usando id canónico ${uid}_${serviceId} para prevenir duplicados
    match /favorites/{favoriteId} {
      // Lectura simplificada: permitir a usuarios autenticados
      allow read: if isSignedIn();

      // Crear con id canónico validado para prevenir duplicados
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.userId
        && request.resource.id == (request.auth.uid + '_' + request.resource.data.serviceId)
        && request.resource.data.keys().hasOnly(['userId','serviceId','createdAt'])
        && exists(/databases/$(database)/documents/services/$(request.resource.data.serviceId))
        && (!request.resource.data.keys().hasAny(['createdAt']) || nearNow(request.resource.data.createdAt));

      // Solo dueño puede actualizar/eliminar
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
    
    // === CATEGORÍAS DE SERVICIOS ===
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if false; // Solo administradores
    }
    
    // === CONFIGURACIÓN GLOBAL ===
    match /app_config/{configId} {
      allow read: if true;
      allow write: if false; // Solo administradores
    }
    
    // === UBICACIONES ===
    match /locations/{locationId} {
      allow read: if true;
      allow write: if false; // Solo el sistema
    }
    
    // === REPORTES ===
    match /reports/{reportId} {
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.reporterId;
      allow read, update, delete: if false; // Solo administradores
    }
    
    // Denegar acceso a todo lo demás por defecto
    match /{document=**} {
      allow read, write: if false;
    }
  }
}